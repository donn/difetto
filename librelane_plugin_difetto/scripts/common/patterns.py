import io
import re
from typing import BinaryIO

from bitarray import bitarray
from bitarray.util import vl_encode, vl_decode


def read_patterns_text(wrapper: io.TextIOWrapper):
    comment_rx = re.compile(r"\*.+$")
    index_rx = re.compile(r"^\s*\d+\s*:\s*")
    for line in wrapper:
        line = comment_rx.sub("", line)
        line = index_rx.sub("", line)
        line = line.strip()
        if line != "":
            yield bitarray(line, endian="little")


def write_pattern_bin(wrapper: BinaryIO, pattern: bitarray):
    wrapper.write(vl_encode(pattern))


def read_patterns_bin(wrapper: BinaryIO):
    def iter_bytes(wrapper):
        for b in iter(lambda: wrapper.read(1), b""):
            yield b[0]

    stream = iter_bytes(wrapper)
    while True:
        try:
            yield vl_decode(stream)
        except (StopIteration, ValueError):
            return


if __name__ == "__main__":
    f = io.StringIO(
        """
* Test pattern file
* generated by quaigh
1: 010110001010101000100110010101100100101001100000100000010101010101
2: 001000010111110100011001101010010011111110001010011011001010100101
3: 000001010001011001010101011110101010010010100001111010010110110001
        """
    )
    for pattern in read_patterns_text(f):
        print(pattern)
